use strict;
use warnings;
use Test::More;
use Plack::Middleware::StackTrace;
use Plack::Test;
use HTTP::Request::Common;

my $app = app_sub();

# No force prints the route return value
my $default_app = Plack::Middleware::StackTrace->wrap($app, no_print_errors => 1);
my $default_test = test_sub(qr/Fancy Error/);
test_psgi $default_app, $default_test;

# Force causes the printing of the error generated by the death
my $force_app = Plack::Middleware::StackTrace->wrap($app, force => 1, no_print_errors => 1);
my $force_test = test_sub(qr/Blah/);
test_psgi $force_app, $force_test;

{

    # This app sets plack.stacktrace.force to 1
    my $app = app_sub(1);

    # No force specified - the env takes over
    my $force_app = Plack::Middleware::StackTrace->wrap($app, no_print_errors => 1);
    test_psgi $force_app, $force_test;

    # Force trumps the env variable
    my $no_force_app = Plack::Middleware::StackTrace->wrap($app, force => 0, no_print_errors => 1);
    test_psgi $no_force_app, $default_test;
}

done_testing;

sub app_sub {
    my $force = shift;
    my $app = sub {
        my $env = shift;
        $env->{"plack.stacktrace.force"} = $force;
        eval { die "Blah" };
        return [ 500, [ 'Content-Type', 'text/html' ], [ "Fancy Error" ] ];
    };
}

sub test_sub {
    my $regex = shift;
    return sub {
        my $cb = shift;

        my $req = GET "/";
        my $res = $cb->($req);

        is $res->code, 500;
        like $res->content, $regex;
    };
}

